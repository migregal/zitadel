// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zitadel/zitadel/internal/pushed_auth_request/repository (interfaces: PushedAuthRequestCache)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oidc "github.com/zitadel/oidc/v3/pkg/oidc"
)

// MockPushedAuthRequestCache is a mock of PushedAuthRequestCache interface.
type MockPushedAuthRequestCache struct {
	ctrl     *gomock.Controller
	recorder *MockPushedAuthRequestCacheMockRecorder
}

// MockPushedAuthRequestCacheMockRecorder is the mock recorder for MockPushedAuthRequestCache.
type MockPushedAuthRequestCacheMockRecorder struct {
	mock *MockPushedAuthRequestCache
}

// NewMockPushedAuthRequestCache creates a new mock instance.
func NewMockPushedAuthRequestCache(ctrl *gomock.Controller) *MockPushedAuthRequestCache {
	mock := &MockPushedAuthRequestCache{ctrl: ctrl}
	mock.recorder = &MockPushedAuthRequestCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushedAuthRequestCache) EXPECT() *MockPushedAuthRequestCacheMockRecorder {
	return m.recorder
}

// CachePushedAuthRequest mocks base method.
func (m *MockPushedAuthRequestCache) CachePushedAuthRequest(arg0 context.Context, arg1 string, arg2 *oidc.AuthRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CachePushedAuthRequest", arg0, arg1, arg2)
}

// CachePushedAuthRequest indicates an expected call of CachePushedAuthRequest.
func (mr *MockPushedAuthRequestCacheMockRecorder) CachePushedAuthRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachePushedAuthRequest", reflect.TypeOf((*MockPushedAuthRequestCache)(nil).CachePushedAuthRequest), arg0, arg1, arg2)
}

// DeletePushedAuthRequest mocks base method.
func (m *MockPushedAuthRequestCache) DeletePushedAuthRequest(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePushedAuthRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePushedAuthRequest indicates an expected call of DeletePushedAuthRequest.
func (mr *MockPushedAuthRequestCacheMockRecorder) DeletePushedAuthRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePushedAuthRequest", reflect.TypeOf((*MockPushedAuthRequestCache)(nil).DeletePushedAuthRequest), arg0, arg1)
}

// GetPushedAuthRequestByRequestURI mocks base method.
func (m *MockPushedAuthRequestCache) GetPushedAuthRequestByRequestURI(arg0 context.Context, arg1 string) (*oidc.AuthRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushedAuthRequestByRequestURI", arg0, arg1)
	ret0, _ := ret[0].(*oidc.AuthRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushedAuthRequestByRequestURI indicates an expected call of GetPushedAuthRequestByRequestURI.
func (mr *MockPushedAuthRequestCacheMockRecorder) GetPushedAuthRequestByRequestURI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushedAuthRequestByRequestURI", reflect.TypeOf((*MockPushedAuthRequestCache)(nil).GetPushedAuthRequestByRequestURI), arg0, arg1)
}

// Health mocks base method.
func (m *MockPushedAuthRequestCache) Health(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockPushedAuthRequestCacheMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockPushedAuthRequestCache)(nil).Health), arg0)
}

// SavePushedAuthRequest mocks base method.
func (m *MockPushedAuthRequestCache) SavePushedAuthRequest(arg0 context.Context, arg1 string, arg2 *oidc.AuthRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePushedAuthRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePushedAuthRequest indicates an expected call of SavePushedAuthRequest.
func (mr *MockPushedAuthRequestCacheMockRecorder) SavePushedAuthRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePushedAuthRequest", reflect.TypeOf((*MockPushedAuthRequestCache)(nil).SavePushedAuthRequest), arg0, arg1, arg2)
}
